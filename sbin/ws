#!/usr/bin/env python3

import asyncio
import datetime
import random
import websockets

import time
import json
from json.decoder import JSONDecodeError
import subprocess

class Messenger:

    def __init__(self, lock):
        self._lock = lock
        self._cond = asyncio.Condition(lock=self._lock)
        self._connected = set()
        with open("/var/message.dat", "r") as f:
            html = f.read()
        self._message = html

    async def update_message(self, new_message):
        self._message = new_message
        async with self._cond:
            self._cond.notify(n=1)

    async def register(self, websocket):
        message = self._message
        await websocket.send(message)
        self._connected.add(websocket)

    async def unregister(self, websocket):
        self._connected.remove(websocket)

    async def await_message(self):
        async with self._cond:
            await self._cond.wait()
            await self._send()

    async def _send(self):
        message = self._message
        await asyncio.wait([ws.send(message) for ws in self._connected])


def main():
    
    lock = asyncio.Lock()
    messenger = Messenger(lock)

    async def broadcast(websocket, path):
        try:
            await messenger.register(websocket)
            while True:
                await messenger.await_message()
                await asyncio.sleep(1)
        finally:
            await messenger.unregister(websocket)

    async def update(websocket, path):
        while True:
            async for message in websocket:
                await messenger.update_message(message)


    start_server_broadcast = websockets.serve(broadcast, "127.0.0.1", 8888)
    start_server_update = websockets.serve(update, "0.0.0.0", 9888)

    asyncio.get_event_loop().run_until_complete(start_server_broadcast)
    asyncio.get_event_loop().run_until_complete(start_server_update)
    asyncio.get_event_loop().run_forever()

    return 1


if __name__ == "__main__":
    main()
