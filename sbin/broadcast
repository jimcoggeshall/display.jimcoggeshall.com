#!/usr/bin/env python3

import asyncio
import datetime
import random
import websockets

import datetime
import time
import json
import subprocess
import itertools

class Messenger:

    def _fetch_message_now(self):
        self._message = next(self._messages)
        self._recent_fetch = datetime.datetime.now()

    def __init__(self, lock):
        self._lock = lock
        with open("/var/broadcast/message.txt", "r") as f:
            messages = []
            for m in f:
                messages.append(m.rstrip())
            random.shuffle(messages)
            self._messages = itertools.cycle(messages)
        self._fetch_message_now()

    async def _receive_message(self):
        now = datetime.datetime.now()
        if (now - self._recent_fetch).total_seconds() < 90:
            return
        with await self._lock:
            self._fetch_message_now()

    async def current_message(self):
        try:
            await asyncio.wait_for(self._receive_message(), timeout=5)
        except asyncio.TimeoutError:
            pass
        return self._message



def main():
    
    lock = asyncio.Lock()
    messenger = Messenger(lock)

    async def broadcast(websocket, path):
        sent = set()
        while True:
            message = await messenger.current_message()
            if not message in sent:
                sent.add(message)
                await websocket.send(message)
            await asyncio.sleep(1)


    start_server = websockets.serve(broadcast, "127.0.0.1", 8891)

    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()

    return 1


if __name__ == "__main__":
    main()
