#!/usr/bin/env python3

import asyncio
import datetime
import websockets

import time
import json

class Messenger:

    def __init__(self, lock):
        self._lock = lock
        self._cond = asyncio.Condition(lock=self._lock)
        self._connected = set()
        with open("/var/timer/state.json", "r") as f:
            message = json.load(f)
        try:
            with open("/var/timer/state.mod.json", "r") as f:
                message = json.load(f)
        except:
            pass
        self._message = json.dumps(message, separators=(",", ":"))
        
    async def update_message(self, new_message):
        self._message = new_message
        with open("/var/timer/state.mod.json", "w") as f:
            f.write(new_message)
        async with self._cond:
            self._cond.notify(n=1)

    async def register(self, websocket):
        message = self._message
        await websocket.send(message)
        self._connected.add(websocket)

    async def unregister(self, websocket):
        self._connected.remove(websocket)

    async def await_message(self):
        async with self._cond:
            await self._cond.wait()
            await self._send()

    async def _send(self):
        message = self._message
        await asyncio.wait([ws.send(message) for ws in self._connected])


def main():
    
    lock = asyncio.Lock()
    messenger = Messenger(lock)

    async def broadcast(websocket, path):

        try:

            await messenger.register(websocket)

            async def consumer_handler(websocket, path):
                async for message in websocket:
                    await messenger.update_message(message)

            async def producer_handler(websocket, path):
                while True:
                    await messenger.await_message()
                    await asyncio.sleep(1)

            while True:
                consumer_task = asyncio.ensure_future(consumer_handler(websocket, path))
                producer_task = asyncio.ensure_future(producer_handler(websocket, path))

                done, pending = await asyncio.wait( 
                    [consumer_task, producer_task],
                    return_when=asyncio.FIRST_COMPLETED,
                )
                for task in pending:
                    task.cancel()

        finally:
            await messenger.unregister(websocket)


    start_server = websockets.serve(broadcast, "127.0.0.1", 8889)

    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()

    return 1


if __name__ == "__main__":
    main()
